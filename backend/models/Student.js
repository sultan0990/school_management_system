// Student Model - Real Database Schema
// backend/models/Student.js

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const studentSchema = new mongoose.Schema({
  // Unique Student ID (Generated by Admin)
  studentId: {
    type: String,
    required: true,
    unique: true,
    default: () => `STU${Date.now()}${Math.floor(Math.random() * 1000)}`
  },
  
  // Personal Information
  firstName: {
    type: String,
    required: true,
    trim: true
  },
  lastName: {
    type: String,
    required: true,
    trim: true
  },
  mobile: {
    type: String,
    required: true,
    unique: true,
    validate: {
      validator: function(v) {
        return /^[6-9]\d{9}$/.test(v);
      },
      message: 'Invalid mobile number'
    }
  },
  email: {
    type: String,
    trim: true,
    lowercase: true
  },
  gender: {
    type: String,
    enum: ['Male', 'Female', 'Other'],
    required: true
  },
  dateOfBirth: {
    type: Date,
    required: true
  },
  
  // Academic Information
  classSection: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true
  },
  grNumber: {
    type: String,
    required: true,
    unique: true
  },
  
  // Address Information
  currentAddress: {
    type: String,
    required: true
  },
  permanentAddress: {
    type: String,
    required: true
  },
  
  // Parent Information
  fatherName: {
    type: String,
    required: true
  },
  fatherMobile: {
    type: String,
    required: true,
    validate: {
      validator: function(v) {
        return /^[6-9]\d{9}$/.test(v);
      },
      message: 'Invalid father mobile number'
    }
  },
  motherName: {
    type: String,
    required: true
  },
  motherMobile: {
    type: String,
    required: true,
    validate: {
      validator: function(v) {
        return /^[6-9]\d{9}$/.test(v);
      },
      message: 'Invalid mother mobile number'
    }
  },
  
  // Authentication
  isActive: {
    type: Boolean,
    default: true
  },
  loginAttempts: {
    type: Number,
    default: 0
  },
  lastLoginAttempt: {
    type: Date
  },
  
  // Timestamps
  admissionDate: {
    type: Date,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Index for faster queries
studentSchema.index({ mobile: 1 });
studentSchema.index({ studentId: 1 });
studentSchema.index({ grNumber: 1 });

// Pre-save middleware
studentSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// Static method to generate unique GR Number
studentSchema.statics.generateGRNumber = async function() {
  const year = new Date().getFullYear();
  const count = await this.countDocuments({ 
    grNumber: { $regex: `^${year}` } 
  });
  return `${year}-${String(count + 1).padStart(4, '0')}`;
};

// Instance method to check if student can login
studentSchema.methods.canLogin = function() {
  if (!this.isActive) return false;
  if (this.loginAttempts >= 5) {
    const lockoutTime = new Date(this.lastLoginAttempt);
    lockoutTime.setHours(lockoutTime.getHours() + 24);
    return new Date() > lockoutTime;
  }
  return true;
};

module.exports = mongoose.model('Student', studentSchema);
